//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.huawei.innovation.rdm.minibomdatamodel.dto.entity;

import com.huawei.innovation.rdm.coresdk.basic.dto.VersionObjectBranchCreateDTO;
import com.huawei.innovation.rdm.minibomdatamodel.bean.entity.PartBranch;
import io.swagger.annotations.ApiModel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
import java.util.Objects;

@ApiModel("PartBranchCreateDTO")
@Schema(
    name = "PartBranchCreateDTO"
)
public class PartBranchCreateDTO extends VersionObjectBranchCreateDTO implements Serializable {
    private static final long serialVersionUID = -3056995248381231740L;

    public PartBranch toEntity(PartBranch entity4920) {
        if (Objects.isNull(entity4920)) {
            return null;
        } else {
            super.toEntity(entity4920);
            return entity4920;
        }
    }

    public PartBranchCreateDTO() {
    }

    public String toString() {
        return "PartBranchCreateDTO()";
    }

    public boolean equals(Object o) {
        if (o == this) {
            return true;
        } else if (!(o instanceof PartBranchCreateDTO)) {
            return false;
        } else {
            PartBranchCreateDTO other = (PartBranchCreateDTO)o;
            if (!other.canEqual(this)) {
                return false;
            } else {
                return super.equals(o);
            }
        }
    }

    protected boolean canEqual(Object other) {
        return other instanceof PartBranchCreateDTO;
    }

    public int hashCode() {
        int result = super.hashCode();
        return result;
    }
}


//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.huawei.innovation.rdm.xdm.dto.entity;

import com.huawei.innovation.rdm.bean.entity.EXAValue;
import com.huawei.innovation.rdm.coresdk.basic.dto.BasicObjectSaveDTO;
import com.huawei.innovation.rdm.coresdk.basic.dto.ObjectReferenceParamDTO;
import com.huawei.innovation.rdm.coresdk.basic.util.PersistUtil;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
import java.util.Objects;
import java.util.Optional;

@ApiModel("EXAValueSaveDTO")
@Schema(
    name = "EXAValueSaveDTO"
)
public class EXAValueSaveDTO extends BasicObjectSaveDTO implements Serializable {
    private static final long serialVersionUID = -2747140143251565561L;
    @ApiModelProperty(
        required = true,
        value = "AttributeHolder",
        notes = "EXAValueSaveDTO"
    )
    @Schema(
        name = "attributeHolder",
        description = "AttributeHolder",
        required = true
    )
    private ObjectReferenceParamDTO attributeHolder;

    public EXAValue toEntity(EXAValue entity0731) {
        if (Objects.isNull(entity0731)) {
            return null;
        } else {
            Optional.ofNullable(this.getAttributeHolder()).ifPresent((t) -> {
                entity0731.setAttributeHolder(PersistUtil.processReference(t, "attributeHolder", EXAValue.class));
            });
            super.toEntity(entity0731);
            return entity0731;
        }
    }

    public EXAValueSaveDTO() {
    }

    public ObjectReferenceParamDTO getAttributeHolder() {
        return this.attributeHolder;
    }

    public void setAttributeHolder(ObjectReferenceParamDTO attributeHolder) {
        this.attributeHolder = attributeHolder;
    }

    public String toString() {
        return "EXAValueSaveDTO(attributeHolder=" + this.getAttributeHolder() + ")";
    }

    public boolean equals(Object o) {
        if (o == this) {
            return true;
        } else if (!(o instanceof EXAValueSaveDTO)) {
            return false;
        } else {
            EXAValueSaveDTO other = (EXAValueSaveDTO)o;
            if (!other.canEqual(this)) {
                return false;
            } else if (!super.equals(o)) {
                return false;
            } else {
                Object this$attributeHolder = this.getAttributeHolder();
                Object other$attributeHolder = other.getAttributeHolder();
                if (this$attributeHolder == null) {
                    if (other$attributeHolder != null) {
                        return false;
                    }
                } else if (!this$attributeHolder.equals(other$attributeHolder)) {
                    return false;
                }

                return true;
            }
        }
    }

    protected boolean canEqual(Object other) {
        return other instanceof EXAValueSaveDTO;
    }

    public int hashCode() {
        int PRIME = true;
        int result = super.hashCode();
        Object $attributeHolder = this.getAttributeHolder();
        result = result * 59 + ($attributeHolder == null ? 43 : $attributeHolder.hashCode());
        return result;
    }
}

/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 */

package com.huawei.minibom.result;

/**
 * 返回结果封装类
 * 
 * @author huawei
 * @since 2025-06-16
 */
public class ReturnResult {
    private Integer code;
    private String message;
    private Object data;

    public ReturnResult() {
    }

    public ReturnResult(Integer code, String message) {
        this.code = code;
        this.message = message;
    }

    public ReturnResult(Integer code, String message, Object data) {
        this.code = code;
        this.message = message;
        this.data = data;
    }

    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Object getData() {
        return data;
    }

    public void setData(Object data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return "ReturnResult{" +
                "code=" + code +
                ", message='" + message + '\'' +
                ", data=" + data +
                '}';
    }
} 


//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.huawei.innovation.rdm.coresdk.basic.vo;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.common.collect.Lists;
import com.huawei.innovation.rdm.coresdk.basic.enums.CharacterSetEnum;
import com.huawei.innovation.rdm.coresdk.basic.enums.ConditionType;
import com.huawei.innovation.rdm.coresdk.basic.enums.JoinerType;
import com.huawei.innovation.rdm.coresdk.basic.enums.PublicData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Pattern.Flag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

@ApiModel
@Schema
public class QueryRequestVo {
    private static final Logger log = LoggerFactory.getLogger(QueryRequestVo.class);
    @ApiModelProperty("排序方向")
    @Schema(
        description = "排序方向"
    )
    private @Pattern(
    regexp = "ASC|DESC",
    flags = {Flag.CASE_INSENSITIVE},
    message = "Illegal sort! only asc or desc"
) String sort;
    @ApiModelProperty("排序字段")
    @Schema(
        description = "排序字段"
    )
    private @Pattern(
    regexp = "^[0-9a-zA-Z_.]{1,}$",
    flags = {Flag.CASE_INSENSITIVE},
    message = "Illegal attribute name! contain only alphabet, point, digit or underline."
) String orderBy;
    @ApiModelProperty("sql编码类型")
    @Schema(
        description = "sql编码类型"
    )
    private CharacterSetEnum characterSet;
    @ApiModelProperty("排序字段的表别名")
    @Schema(
        description = "排序字段的表别名"
    )
    private String orderByTableAlias;
    @ApiModelProperty("查询条件")
    @Schema(
        description = "查询条件"
    )
    private List<QueryCondition> conditions;
    @ApiModelProperty("查询条件")
    @Schema(
        description = "查询条件"
    )
    private @Valid QueryCondition filter;
    @ApiModelProperty("是否加密")
    @Schema(
        description = "是否加密"
    )
    private Boolean decrypt;
    @ApiModelProperty("排序")
    @Schema(
        description = "排序"
    )
    private @Valid List<SortInfo> sorts;
    @ApiModelProperty("用于控制是否需要查询总记录数。若为“true”则基于全表扫描数据汇总结果，对性能影响较大，建议为\"false\"。")
    @Schema(
        description = "用于控制是否需要查询总记录数。若为“true”则基于全表扫描数据汇总结果，对性能影响较大，建议为\"false\"。"
    )
    private Boolean isNeedTotal;
    @ApiModelProperty("是否需要展示所有参考对象信息")
    @Schema(
        description = "是否需要展示所有参考对象信息"
    )
    private Boolean isPresentAll;
    @ApiModelProperty("需要展示详细信息的参考对象")
    @Schema(
        description = "需要展示详细信息的参考对象"
    )
    private List<String> needPresentDetail;
    @ApiModelProperty("实体类型")
    @Schema(
        description = "实体类型"
    )
    private String entityType;
    @ApiModelProperty("多租查询参数")
    @Schema(
        description = "多租查询参数"
    )
    private PublicData publicData;

    @ApiModelProperty("Condition List")
    @Schema(
        description = "Condition List"
    )
    @JsonIgnore
    public List<QueryCondition> getQueryConditionList() {
        return (List)(StringUtils.isEmpty(this.filter) ? Lists.newArrayList() : this.filter.collectConditions());
    }

    public Boolean getDecrypt() {
        return this.decrypt == null ? false : this.decrypt;
    }

    public Boolean getIsNeedTotal() {
        return this.isNeedTotal == null ? false : this.isNeedTotal;
    }

    public static QueryRequestVo build() {
        return new QueryRequestVo();
    }

    public QueryCondition begin(@NotNull JoinerType joiner) {
        QueryCondition condition = new QueryCondition();
        condition.setJoiner(joiner.getJoiner());
        condition.setPreCondition((QueryCondition)null);
        this.setFilter(condition);
        return condition;
    }

    public QueryCondition and() {
        return this.begin(JoinerType.AND);
    }

    public QueryCondition or() {
        return this.begin(JoinerType.OR);
    }

    public void addCondition(String name, ConditionType operation) {
        this.setFilter(new QueryCondition(name, operation.getOper()));
    }

    public <T> void addCondition(String name, ConditionType operation, T value) {
        this.setFilter(new QueryCondition(name, operation.getOper(), value.toString()));
    }

    public <T> void addCondition(String name, ConditionType operation, T value, boolean isIgnoreCase) {
        this.setFilter(new QueryCondition(name, operation.getOper(), value.toString(), isIgnoreCase));
    }

    public <T> void addCondition(String name, ConditionType operation, List<T> valueList) {
        this.setFilter(new QueryCondition(name, operation.getOper(), (List)valueList.stream().map(Object::toString).collect(Collectors.toList())));
    }

    public <T> void addCondition(String name, ConditionType operation, List<T> valueList, boolean isIgnoreCase) {
        this.setFilter(new QueryCondition(name, operation.getOper(), (List)valueList.stream().map(Object::toString).collect(Collectors.toList()), isIgnoreCase));
    }

    public QueryRequestVo() {
        this.characterSet = CharacterSetEnum.UTF8;
        this.conditions = new ArrayList();
        this.decrypt = false;
        this.sorts = new ArrayList();
        this.isNeedTotal = false;
        this.isPresentAll = true;
        this.publicData = PublicData.INCLUDE_PUBLIC_DATA;
    }

    public String getSort() {
        return this.sort;
    }

    public String getOrderBy() {
        return this.orderBy;
    }

    public CharacterSetEnum getCharacterSet() {
        return this.characterSet;
    }

    public String getOrderByTableAlias() {
        return this.orderByTableAlias;
    }

    public List<QueryCondition> getConditions() {
        return this.conditions;
    }

    public QueryCondition getFilter() {
        return this.filter;
    }

    public List<SortInfo> getSorts() {
        return this.sorts;
    }

    public Boolean getIsPresentAll() {
        return this.isPresentAll;
    }

    public List<String> getNeedPresentDetail() {
        return this.needPresentDetail;
    }

    public String getEntityType() {
        return this.entityType;
    }

    public PublicData getPublicData() {
        return this.publicData;
    }

    public QueryRequestVo setSort(String sort) {
        this.sort = sort;
        return this;
    }

    public QueryRequestVo setOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
    }

    public QueryRequestVo setCharacterSet(CharacterSetEnum characterSet) {
        this.characterSet = characterSet;
        return this;
    }

    public QueryRequestVo setOrderByTableAlias(String orderByTableAlias) {
        this.orderByTableAlias = orderByTableAlias;
        return this;
    }

    public QueryRequestVo setConditions(List<QueryCondition> conditions) {
        this.conditions = conditions;
        return this;
    }

    public QueryRequestVo setFilter(QueryCondition filter) {
        this.filter = filter;
        return this;
    }

    public QueryRequestVo setDecrypt(Boolean decrypt) {
        this.decrypt = decrypt;
        return this;
    }

    public QueryRequestVo setSorts(List<SortInfo> sorts) {
        this.sorts = sorts;
        return this;
    }

    public QueryRequestVo setIsNeedTotal(Boolean isNeedTotal) {
        this.isNeedTotal = isNeedTotal;
        return this;
    }

    public QueryRequestVo setIsPresentAll(Boolean isPresentAll) {
        this.isPresentAll = isPresentAll;
        return this;
    }

    public QueryRequestVo setNeedPresentDetail(List<String> needPresentDetail) {
        this.needPresentDetail = needPresentDetail;
        return this;
    }

    public QueryRequestVo setEntityType(String entityType) {
        this.entityType = entityType;
        return this;
    }

    public QueryRequestVo setPublicData(PublicData publicData) {
        this.publicData = publicData;
        return this;
    }

    public boolean equals(Object o) {
        if (o == this) {
            return true;
        } else if (!(o instanceof QueryRequestVo)) {
            return false;
        } else {
            QueryRequestVo other = (QueryRequestVo)o;
            if (!other.canEqual(this)) {
                return false;
            } else {
                label167: {
                    Object this$decrypt = this.getDecrypt();
                    Object other$decrypt = other.getDecrypt();
                    if (this$decrypt == null) {
                        if (other$decrypt == null) {
                            break label167;
                        }
                    } else if (this$decrypt.equals(other$decrypt)) {
                        break label167;
                    }

                    return false;
                }

                Object this$isNeedTotal = this.getIsNeedTotal();
                Object other$isNeedTotal = other.getIsNeedTotal();
                if (this$isNeedTotal == null) {
                    if (other$isNeedTotal != null) {
                        return false;
                    }
                } else if (!this$isNeedTotal.equals(other$isNeedTotal)) {
                    return false;
                }

                label153: {
                    Object this$isPresentAll = this.getIsPresentAll();
                    Object other$isPresentAll = other.getIsPresentAll();
                    if (this$isPresentAll == null) {
                        if (other$isPresentAll == null) {
                            break label153;
                        }
                    } else if (this$isPresentAll.equals(other$isPresentAll)) {
                        break label153;
                    }

                    return false;
                }

                Object this$sort = this.getSort();
                Object other$sort = other.getSort();
                if (this$sort == null) {
                    if (other$sort != null) {
                        return false;
                    }
                } else if (!this$sort.equals(other$sort)) {
                    return false;
                }

                label139: {
                    Object this$orderBy = this.getOrderBy();
                    Object other$orderBy = other.getOrderBy();
                    if (this$orderBy == null) {
                        if (other$orderBy == null) {
                            break label139;
                        }
                    } else if (this$orderBy.equals(other$orderBy)) {
                        break label139;
                    }

                    return false;
                }

                Object this$characterSet = this.getCharacterSet();
                Object other$characterSet = other.getCharacterSet();
                if (this$characterSet == null) {
                    if (other$characterSet != null) {
                        return false;
                    }
                } else if (!this$characterSet.equals(other$characterSet)) {
                    return false;
                }

                label125: {
                    Object this$orderByTableAlias = this.getOrderByTableAlias();
                    Object other$orderByTableAlias = other.getOrderByTableAlias();
                    if (this$orderByTableAlias == null) {
                        if (other$orderByTableAlias == null) {
                            break label125;
                        }
                    } else if (this$orderByTableAlias.equals(other$orderByTableAlias)) {
                        break label125;
                    }

                    return false;
                }

                label118: {
                    Object this$conditions = this.getConditions();
                    Object other$conditions = other.getConditions();
                    if (this$conditions == null) {
                        if (other$conditions == null) {
                            break label118;
                        }
                    } else if (this$conditions.equals(other$conditions)) {
                        break label118;
                    }

                    return false;
                }

                Object this$filter = this.getFilter();
                Object other$filter = other.getFilter();
                if (this$filter == null) {
                    if (other$filter != null) {
                        return false;
                    }
                } else if (!this$filter.equals(other$filter)) {
                    return false;
                }

                label104: {
                    Object this$sorts = this.getSorts();
                    Object other$sorts = other.getSorts();
                    if (this$sorts == null) {
                        if (other$sorts == null) {
                            break label104;
                        }
                    } else if (this$sorts.equals(other$sorts)) {
                        break label104;
                    }

                    return false;
                }

                label97: {
                    Object this$needPresentDetail = this.getNeedPresentDetail();
                    Object other$needPresentDetail = other.getNeedPresentDetail();
                    if (this$needPresentDetail == null) {
                        if (other$needPresentDetail == null) {
                            break label97;
                        }
                    } else if (this$needPresentDetail.equals(other$needPresentDetail)) {
                        break label97;
                    }

                    return false;
                }

                Object this$entityType = this.getEntityType();
                Object other$entityType = other.getEntityType();
                if (this$entityType == null) {
                    if (other$entityType != null) {
                        return false;
                    }
                } else if (!this$entityType.equals(other$entityType)) {
                    return false;
                }

                Object this$publicData = this.getPublicData();
                Object other$publicData = other.getPublicData();
                if (this$publicData == null) {
                    if (other$publicData != null) {
                        return false;
                    }
                } else if (!this$publicData.equals(other$publicData)) {
                    return false;
                }

                return true;
            }
        }
    }

    protected boolean canEqual(Object other) {
        return other instanceof QueryRequestVo;
    }

    public int hashCode() {
        int PRIME = true;
        int result = 1;
        Object $decrypt = this.getDecrypt();
        result = result * 59 + ($decrypt == null ? 43 : $decrypt.hashCode());
        Object $isNeedTotal = this.getIsNeedTotal();
        result = result * 59 + ($isNeedTotal == null ? 43 : $isNeedTotal.hashCode());
        Object $isPresentAll = this.getIsPresentAll();
        result = result * 59 + ($isPresentAll == null ? 43 : $isPresentAll.hashCode());
        Object $sort = this.getSort();
        result = result * 59 + ($sort == null ? 43 : $sort.hashCode());
        Object $orderBy = this.getOrderBy();
        result = result * 59 + ($orderBy == null ? 43 : $orderBy.hashCode());
        Object $characterSet = this.getCharacterSet();
        result = result * 59 + ($characterSet == null ? 43 : $characterSet.hashCode());
        Object $orderByTableAlias = this.getOrderByTableAlias();
        result = result * 59 + ($orderByTableAlias == null ? 43 : $orderByTableAlias.hashCode());
        Object $conditions = this.getConditions();
        result = result * 59 + ($conditions == null ? 43 : $conditions.hashCode());
        Object $filter = this.getFilter();
        result = result * 59 + ($filter == null ? 43 : $filter.hashCode());
        Object $sorts = this.getSorts();
        result = result * 59 + ($sorts == null ? 43 : $sorts.hashCode());
        Object $needPresentDetail = this.getNeedPresentDetail();
        result = result * 59 + ($needPresentDetail == null ? 43 : $needPresentDetail.hashCode());
        Object $entityType = this.getEntityType();
        result = result * 59 + ($entityType == null ? 43 : $entityType.hashCode());
        Object $publicData = this.getPublicData();
        result = result * 59 + ($publicData == null ? 43 : $publicData.hashCode());
        return result;
    }

    public String toString() {
        return "QueryRequestVo(sort=" + this.getSort() + ", orderBy=" + this.getOrderBy() + ", characterSet=" + this.getCharacterSet() + ", orderByTableAlias=" + this.getOrderByTableAlias() + ", conditions=" + this.getConditions() + ", filter=" + this.getFilter() + ", decrypt=" + this.getDecrypt() + ", sorts=" + this.getSorts() + ", isNeedTotal=" + this.getIsNeedTotal() + ", isPresentAll=" + this.getIsPresentAll() + ", needPresentDetail=" + this.getNeedPresentDetail() + ", entityType=" + this.getEntityType() + ", publicData=" + this.getPublicData() + ")";
    }
}

/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 */

package com.huawei.minibom.result;

/**
 * 返回状态码常量
 * 
 * @author huawei
 * @since 2025-06-16
 */
public class ReturnCode {
    
    // 注册部分（11X）
    public static final Integer USER_NAME_ALREADY_EXISTED = 111; // 用户名已存在
    public static final Integer USER_NAME_INVALID = 112; // 用户名非法
    public static final Integer PASSWORD_INVALID = 113; // 密码非法
    public static final Integer EMAIL_INVALID = 114; // 邮箱非法
    public static final Integer TELEPHONE_INVALID = 115; // 手机号非法
    public static final Integer USER_REGISTER_SUCCESS = 116; // 注册成功
    public static final Integer USER_REGISTER_FAIL = 117; // 注册失败

    // 登录部分（12X）
    public static final Integer USER_NOT_EXIST = 121; // 用户名不存在
    public static final Integer USER_OR_PASSWORD_NOT_MATCH = 122; // 用户名和密码不匹配
    public static final Integer LOGIN_SUCCESS = 123; // 登录成功
    public static final Integer LOGIN_FAIL = 124; // 登录失败

    // 基础操作结果码
    public static final Integer INSERT_OK = 20011;
    public static final Integer DELETE_OK = 20021;
    public static final Integer UPDATE_OK = 20031;
    public static final Integer GET_OK = 20041;

    public static final Integer INSERT_ERR = 20010;
    public static final Integer DELETE_ERR = 20020;
    public static final Integer UPDATE_ERR = 20030;
    public static final Integer GET_ERR = 20040;

    // 参数错误码 (4XX)
    public static final Integer PARAM_IS_INVALID = 40001;
    public static final Integer PARAM_TYPE_ERROR = 40002;
    public static final Integer TARGET_NOT_EXIST = 40401; // 目标不存在

    // 系统错误码
    public static final Integer SYSTEM_ERR = 50001;
    public static final Integer SYSTEM_TIMEOUT_ERR = 50002;
    public static final Integer SYSTEM_UNKNOWN_ERR = 59999;

    // 业务错误码
    public static final Integer BUSINESS_ERR = 60002;
    public static final Integer BUSINESS_OK = 60003;
} 

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.huawei.innovation.rdm.coresdk.basic.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;

@ApiModel
@Schema
public class MasterIdModifierDTO extends MasterIdDTO {
    @ApiModelProperty("处理人")
    @Schema(
        description = "处理人"
    )
    private String modifier;

    public MasterIdModifierDTO() {
    }

    public String getModifier() {
        return this.modifier;
    }

    public void setModifier(String modifier) {
        this.modifier = modifier;
    }

    public String toString() {
        return "MasterIdModifierDTO(modifier=" + this.getModifier() + ")";
    }

    public boolean equals(Object o) {
        if (o == this) {
            return true;
        } else if (!(o instanceof MasterIdModifierDTO)) {
            return false;
        } else {
            MasterIdModifierDTO other = (MasterIdModifierDTO)o;
            if (!other.canEqual(this)) {
                return false;
            } else if (!super.equals(o)) {
                return false;
            } else {
                Object this$modifier = this.getModifier();
                Object other$modifier = other.getModifier();
                if (this$modifier == null) {
                    if (other$modifier != null) {
                        return false;
                    }
                } else if (!this$modifier.equals(other$modifier)) {
                    return false;
                }

                return true;
            }
        }
    }

    protected boolean canEqual(Object other) {
        return other instanceof MasterIdModifierDTO;
    }

    public int hashCode() {
        int PRIME = true;
        int result = super.hashCode();
        Object $modifier = this.getModifier();
        result = result * 59 + ($modifier == null ? 43 : $modifier.hashCode());
        return result;
    }
}
